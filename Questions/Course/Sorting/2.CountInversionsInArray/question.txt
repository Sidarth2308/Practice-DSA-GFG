We are given an array with some elements. Count the number of inversions in the array.
I : 2, 4, 1, 3, 5
O : 3

Inversion : If arr[i] > arr[j] where i < j then this is inversion.
Here we have 3 inversions : 
4, 1
4, 3
2, 1

Solution : 
Perform merge sort : 
Divide the array into parts and then recursively sort and merge the parts.
But while merging the parts, count the inversions.
For elements where x > y and 2 parts of the array, there are 3 possibilities:
1) x and y both are in the first part.
2) x and y both are in the second part.
3) x is in the first part and y is in the second part.

Pseudocode:
countInv(arr, l , r){
    res = 0
    if(l<r){
        m = (l+r)/2;
        res = res + countInv(arr, l, m);
        res = res + countInv(arr, m+1, r);
        res = res + countAndMerge(arr,l,m,r);
    }
    return res;
}

Here we are first counting inversions in the left half(l, m) and then in the right half(m+1, r) and then we'll count inversions while merging(x in first and y in the second)
The main thing in countAndMerge we need to write is when the element in first array is bigger than second (A[i]> B[j]) then add B[j] to the original array. this also means that every element in A[i] from this point forward will be greater than B[j] as A[i] is sorted. Hence we will need to add (SizeOfA - i) to the result. 
Eg. 
A = 2, 5, 8, 11
B = 3, 6, 9, 13
Here first 2<3 so 2 is added.
Next 5>3, here we add 3 and we know that all elements after 5 are > 3 so we add sizeA - i = 4-1 = 3 to the result.
Next 5<6 so 5 is added.
Next 8>6  here we add 6 and we know that all elements after 8 are > 6 so we add sizeA - i = 4-2 = 2 to the result.
Next 8<9 so 8 is added.
Next 11>9  here we add 9 and we know that all elements after 11 are > 9 so we add sizeA - i = 4-3 = 1 to the result.
Next 11<13 so 11 is added.
Finally 13 is added

But why are we sorting and how does this help us in terms of efficiency?
This helps us count many inversions in one single go as we know that all elements right of a particular element in left array will be greater. This can only be guaranteed if we sort the array.

Time complexity : O(nlogn)
Aux space : n